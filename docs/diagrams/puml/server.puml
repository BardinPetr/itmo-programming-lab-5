
@startuml

!theme plain
top to bottom direction
skinparam linetype ortho
skinparam classAttributeIconSize 0
hide circle

<style>
classDiagram {
    class {
        header {
            FontStyle bold
        }
    }
}
</style>
!theme plain
top to bottom direction
skinparam linetype ortho

class APICommand {
  + APICommand(): 
  - header: Map<String, Object>
  + validate(): ValidationResponse
  + getHeader(): Map<String, Object>
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + createResponse(): APICommandResponse
  + getCmdIdentifier(): Class<APICommand>
}
class APICommandResponse {
  + APICommandResponse(APIResponseStatus, String): 
  + APICommandResponse(): 
  - status: APIResponseStatus
  - textualResponse: String
  + getStatus(): APIResponseStatus
  + getTextualResponse(): String
  + setStatus(APIResponseStatus): void
  + setTextualResponse(String): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + clientError(String): APICommandResponse
  + serverError(String): APICommandResponse
  + getUserMessage(): String
  + isResolved(): boolean
  + clientError(Exception): APICommandResponse
  + ok(): APICommandResponse
  + isSuccess(): boolean
  + notFound(): APICommandResponse
  + serverError(Exception): APICommandResponse
}
enum APIResponseStatus << enumeration >> {
  + APIResponseStatus(): 
  + AUTH_ERROR: 
  + SERVER_ERROR: 
  + CLIENT_ERROR: 
  + OK: 
  + UNPROCESSED: 
  + NOT_FOUND: 
  + isError(): boolean
  + values(): APIResponseStatus[]
  + valueOf(String): APIResponseStatus
}
class AbstractApplication {
  + AbstractApplication(): 
  - commandHandlers: Map<Class<APICommand>, RequestHandler>
  - anyCommandHandler: RequestHandler
  - nextApp: AbstractApplication
  - log: Logger
  # apply(AppRequest): void
  + on(Class<APICommand>, IApplicationCommandHandler): void
  + on(IApplicationCommandHandler, Class<APICommand>[]): void
  - safeProcessCall(AppRequest, Consumer<AppRequest>): void
  + start(): void
  + chain(AbstractApplication): AbstractApplication
  + on(IApplicationCommandHandler): void
  - forwardToNext(AppRequest): void
  # beforeTermination(AppRequest): void
  + process(AppRequest): void
}
class AppUtils {
  + AppUtils(): 
  + extractUser(AppRequest): Integer
}
class AuthAppFacade {
  + AuthAppFacade(): 
  - isDebug: boolean
  - log: Logger
  + create(DBTableProvider): JWTAuthenticationApplication
  + setDebug(boolean): void
}
class BasePGDAO<V, T> {
  + BasePGDAO(PGDBConnector, String): 
  - log: Logger
  # connection: Connection
  # tableName: String
  # connector: PGDBConnector
  # datasource: PGSimpleDataSource
  + select(): Collection<T>
  + delete(V): boolean
  + parseRow(ResultSet): T
  + select(V): T
  + truncate(): boolean
  + update(V, T): boolean
  + drop(): boolean
  + insert(T): V
}
entity CoordinatesDTO << record >> {
  + CoordinatesDTO(Integer, Float): 
  - x: Integer
  - y: Float
  + x(): Integer
  + y(): Float
}
class DBApplication {
  + DBApplication(ICollectionDAO<Integer, Worker>): 
  - dao: IOwnedCollectionDAO<Integer, Worker>
  - addExitHook(): void
}
class DBApplicationFacade {
  + DBApplicationFacade(): 
  + create(DBTableProvider): AbstractApplication
}
class DBAuthedApplication {
  + DBAuthedApplication(IOwnedCollectionDAO<Integer, Worker>): 
  - dao: IOwnedCollectionDAO<Integer, Worker>
  - onShowMine(AppRequest): void
}
class DBAuthenticationReceiver {
  + DBAuthenticationReceiver(UsersPGDAO): 
  - pc: IPasswordController
  - log: Logger
  - usersDBDAO: UsersPGDAO
  + login(LoginCommand): DefaultLoginResponse
  + register(RegisterCommand): DefaultLoginResponse
  + requestIdentity(int): DefaultLoginResponse
  + authorize(DefaultAuthenticationCredentials): Authentication
}
class DBInsertApplication {
  + DBInsertApplication(IOwnedCollectionDAO<Integer, Worker>): 
  - dao: IOwnedCollectionDAO<Integer, Worker>
  - addOrg(AppRequest): void
  - addIfMin(AppRequest): void
  - selfInfo(AppRequest): void
  - add(AppRequest): void
  - addIfMax(AppRequest): void
}
class DBPager<T> {
  + DBPager(): 
  + paginate(Stream<T>, PagingAPICommand): List<T>
}
class DBPagingExecutor {
  + DBPagingExecutor(ICollectionDAO<Integer, Worker>): 
  - dao: ICollectionDAO<Integer, Worker>
  - pager: DBPager<Worker>
  - showAll(ShowCommand): ShowCommandResponse
  - printDescending(PrintDescendingCommand): PrintDescendingCommandResponse
}
class DBReadExecutor {
  + DBReadExecutor(ICollectionDAO<Integer, Worker>): 
  - dao: ICollectionDAO<Integer, Worker>
  - filterLess(FilterLessPosCommand): FilterLessPosCommandResponse
  - uniqueOrgs(UniqueOrganisationCommand): UniqueOrganisationCommandResponse
}
class DBRemoveApplication {
  + DBRemoveApplication(IOwnedCollectionDAO<Integer, Worker>): 
  - dao: IOwnedCollectionDAO<Integer, Worker>
  - onRemove(AppRequest): void
  - onClear(AppRequest): void
  - onRemoveGreater(AppRequest): void
}
interface DBStorageBackend<T> << interface >> {
  + storeCollection(T): void
  + loadCollection(): T
  + clearCollection(): void
  + getInfo(): CollectionInfo
}
class DBTableProvider {
  + DBTableProvider(PGDBConnector): 
  - log: Logger
  - organizations: OrganizationsPGDAO
  - users: UsersPGDAO
  - PGDBConnector: PGDBConnector
  - workers: WorkersPGDAO
  + getUsers(): UsersPGDAO
  + bootstrap(): void
  + getOrganizations(): OrganizationsPGDAO
  + getWorkers(): WorkersPGDAO
}
class DBUpdateApplication {
  + DBUpdateApplication(IOwnedCollectionDAO<Integer, Worker>): 
  - dao: IOwnedCollectionDAO<Integer, Worker>
  - onUpdate(AppRequest): void
}
class ExecutorAdapterApplication {
  + ExecutorAdapterApplication(Executor): 
  - log: Logger
  - target: Executor
  # apply(AppRequest): void
}
class ExecutorApplication {
  + ExecutorApplication(): 
  + chain(Executor): AbstractApplication
}
interface IAPIMessage << interface >>
interface ICollectionDAO<K, V> << interface >>
interface ICollectionReadDAO<K, V> << interface >> {
  + getCollectionInfo(): CollectionInfo
  + getMin(): V
  + filter(Predicate<V>): List<V>
  + getMax(): V
  + readAll(): List<V>
  + readAll(Comparator<V>): List<V>
  + read(K): V
  + has(K): boolean
  + getOrganizations(): List<Organization>
  + getAllMapped(Function<V, T>): List<T>
  + asStream(): Stream<V>
  + nextPrimaryKey(): K
}
interface ICollectionWriteDAO<K, V> << interface >> {
  + add(V): K
  + remove(K): boolean
  + save(): void
  + update(K, V): boolean
  + clear(): void
  + addOrg(Organization): K
}
interface IIdentifiableCommand<K> << interface >> {
  + getCmdIdentifier(): K
}
interface IPasswordController << interface >> {
  + getHash(String, String): byte[]
  + compare(byte[], byte[]): boolean
  + randomString(int): String
}
interface IWorkerCollectionDAO << interface >>
entity OrganizationDTO << record >> {
  + OrganizationDTO(Integer, String, OrganizationType): 
  - id: Integer
  - fullName: String
  - type: OrganizationType
  + fullName(): String
  + id(): Integer
  + type(): OrganizationType
}
class OrganizationsPGDAO {
  + OrganizationsPGDAO(PGDBConnector): 
  - log: Logger
  + update(Integer, OrganizationDTO): boolean
  - setPreparedStatement(PreparedStatement, OrganizationDTO): void
  + insert(OrganizationDTO): Integer
  + parseRow(ResultSet): OrganizationDTO
}
class PGDBConnector {
  + PGDBConnector(String, DBAuthProvider): 
  - rowSetFactory: RowSetFactory
  - connectUrl: String
  - dbAuthProvider: DBAuthProvider
  - log: Logger
  + getDataSource(): PGSimpleDataSource
  + bootstrap(InputStream): boolean
  + getRowSet(): JdbcRowSet
}
class PGWorkerStorageBackend {
  + PGWorkerStorageBackend(DBTableProvider): 
  - tableProvider: DBTableProvider
  + loadCollection(): WorkerCollection
  + getInfo(): CollectionInfo
  + clearCollection(): void
  + getTableProvider(): DBTableProvider
}
class SHAPasswordController {
  + SHAPasswordController(): 
  - pepper: String
  - md: MessageDigest
  + compare(byte[], byte[]): boolean
  + getHash(String, String): byte[]
  + randomString(int): String
}
class ScriptExecutor {
  + ScriptExecutor(Executor): 
  - targetExecutor: Executor
  - processScript(ExecuteScriptCommand): APICommandResponse
}
class ServerConsoleArgumentsParser {
  + ServerConsoleArgumentsParser(String[]): 
  - log: Logger
  + doBootstrap(): Boolean
  # createOptions(): Options
  + getPort(): Integer
  + getUsername(): String
  + getDatabaseUrl(): String
  + getPassword(): String
}
class TableProviderFactory {
  + TableProviderFactory(): 
  - log: Logger
  + create(String, String, String, boolean): DBTableProvider
}
class UserDTO {
  + UserDTO(int, String, byte[], String): 
  + UserDTO(String, String): 
  - id: int
  - pc: IPasswordController
  - salt: String
  - username: String
  - hashedPassword: byte[]
  # canEqual(Object): boolean
  + getId(): int
  + toString(): String
  + validate(): boolean
  + getHashedPassword(): byte[]
  + setId(int): void
  + hashCode(): int
  + getSalt(): String
  + getUsername(): String
  + equals(Object): boolean
}
class UsersPGDAO {
  + UsersPGDAO(PGDBConnector): 
  - log: Logger
  + select(Integer): UserDTO
  + update(Integer, UserDTO): boolean
  + select(): Collection<UserDTO>
  + selectByUsername(String): UserDTO
  + parseRow(ResultSet): UserDTO
  + delete(Integer): boolean
  + insert(UserDTO): Integer
}
entity WorkerDTO << record >> {
  + WorkerDTO(Worker): 
  + WorkerDTO(Integer, Integer, Integer, ZonedDateTime, Date, LocalDate, String, Float, Coordinates, Position, String): 
  - ownerId: Integer
  - startDate: Date
  - organizationId: Integer
  - endDate: LocalDate
  - id: Integer
  - position: Position
  - name: String
  - salary: Float
  - creationDate: ZonedDateTime
  - coordinates: Coordinates
  - ownerUsername: String
  + id(): Integer
  + organizationId(): Integer
  + ownerUsername(): String
  + creationDate(): ZonedDateTime
  + ownerId(): Integer
  + endDate(): LocalDate
  + coordinates(): Coordinates
  + salary(): Float
  + getPrimaryKey(): Integer
  + startDate(): Date
  + position(): Position
  + name(): String
}
class WorkerFactory {
  + WorkerFactory(): 
  - x: int
  - salary: int
  - y: int
  - id: int
}
class WorkersCachedCollection {
  + WorkersCachedCollection(PGWorkerStorageBackend): 
  - collection: WorkerCollection
  - backend: PGWorkerStorageBackend
  + clear(): void
  + add(Worker): Integer
  + getCollectionInfo(): CollectionInfo
  + getOrganizations(): List<Organization>
  + readAll(): List<Worker>
  + getMin(): Worker
  + asStream(): Stream<Worker>
  + read(Integer): Worker
  + update(Integer, Worker): boolean
  + remove(Integer): boolean
  + addOrg(Organization): Integer
  + has(Integer): boolean
  + nextPrimaryKey(): Integer
  + getMax(): Worker
}
class WorkersDAOFactory {
  + WorkersDAOFactory(DBTableProvider): 
  - tableProvider: DBTableProvider
  - log: Logger
  + createDB(): IWorkerCollectionDAO
}
class WorkersPGDAO {
  + WorkersPGDAO(PGDBConnector): 
  - log: Logger
  + select(Integer): WorkerDTO
  - setPreparedStatement(PreparedStatement, WorkerDTO): void
  + parseRow(ResultSet): WorkerDTO
  + select(): Collection<WorkerDTO>
  + insert(WorkerDTO): Integer
  + update(Integer, WorkerDTO): boolean
}

APICommand                    ..^  IAPIMessage                  
APICommand                    ..^  IIdentifiableCommand         
APICommandResponse           "1" *--> "status\n1" APIResponseStatus            
APICommandResponse            ..^  IAPIMessage                  
BasePGDAO                    "1" *--> "connector\n1" PGDBConnector                
DBApplication                 --^  AbstractApplication          
DBAuthedApplication           --^  AbstractApplication          
DBAuthenticationReceiver     "1" *--> "pc\n1" IPasswordController          
DBAuthenticationReceiver     "1" *--> "usersDBDAO\n1" UsersPGDAO                   
DBInsertApplication           --^  AbstractApplication          
DBPagingExecutor             "1" *--> "pager\n1" DBPager                      
DBPagingExecutor             "1" *--> "dao\n1" ICollectionDAO               
DBReadExecutor               "1" *--> "dao\n1" ICollectionDAO               
DBRemoveApplication           --^  AbstractApplication          
DBTableProvider              "1" *--> "organizations\n1" OrganizationsPGDAO           
DBTableProvider              "1" *--> "PGDBConnector\n1" PGDBConnector                
DBTableProvider              "1" *--> "users\n1" UsersPGDAO                   
DBTableProvider              "1" *--> "workers\n1" WorkersPGDAO                 
DBUpdateApplication           --^  AbstractApplication          
ExecutorAdapterApplication    --^  AbstractApplication          
ExecutorApplication           --^  AbstractApplication          
ICollectionDAO                --^  ICollectionReadDAO           
ICollectionDAO                --^  ICollectionWriteDAO          
IWorkerCollectionDAO          --^  ICollectionDAO               
OrganizationsPGDAO            --^  BasePGDAO                    
PGWorkerStorageBackend        ..^  DBStorageBackend             
PGWorkerStorageBackend       "1" *--> "tableProvider\n1" DBTableProvider              
SHAPasswordController         ..^  IPasswordController          
UserDTO                      "1" *--> "pc\n1" IPasswordController          
UsersPGDAO                    --^  BasePGDAO                    
WorkersCachedCollection       ..^  IWorkerCollectionDAO         
WorkersCachedCollection      "1" *--> "backend\n1" PGWorkerStorageBackend       
WorkersDAOFactory            "1" *--> "tableProvider\n1" DBTableProvider              
WorkersPGDAO                  --^  BasePGDAO                    
@enduml
