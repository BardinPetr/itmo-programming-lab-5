
@startuml

!theme plain
top to bottom direction
skinparam linetype ortho
skinparam classAttributeIconSize 0
hide circle

<style>
classDiagram {
    class {
        header {
            FontStyle bold
        }
    }
}
</style>
!theme plain
top to bottom direction
skinparam linetype ortho

class APICommand {
  + APICommand(): 
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + validate(): ValidationResponse
  + getType(): String
  + getInteractArgs(): Field[]
  + getInlineArgs(): Field[]
  + createResponse(): ICommandResponse
}
class CollectionInfo {
  + CollectionInfo(String, String, ZonedDateTime, Integer): 
  - initializationDate: ZonedDateTime
  - name: String
  - itemsCount: Integer
  - type: String
  + setInitializationDate(ZonedDateTime): void
  + getName(): String
  + getType(): String
  + getInitializationDate(): ZonedDateTime
  + toString(): String
  + getItemsCount(): Integer
  + setName(String): void
  + setType(String): void
  + setItemsCount(Integer): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
}
interface DBController << interface >>
interface DBControllerFactory << interface >> {
  + createController(): DBController
}
class DBCreateException {
  + DBCreateException(Exception): 
}
class Executor {
  + Executor(): 
  - operationMap: Map<Class<APICommand>, Operation<APICommand, ICommandResponse>>
  - childExecutors: List<Executor>
  + MAX_RECURSION_DEPTH: int
  + registerExecutor(Executor): void
  + registerVoidOperation(Class<T>, NoReturnOperation<T>): void
  + execute(APICommand): Response<ICommandResponse>
  + executeBatch(List<APICommand>): List<Response<ICommandResponse>>
  + registerOperation(Class<T>, Operation<T, ICommandResponse>): void
  # execute(APICommand, int): Response<ICommandResponse>
}
class FileDBController<T> {
  + FileDBController(FileIOController, Class<T>): 
  - baseCollectionClass: Class<T>
  - collection: T
  - fileIO: FileIOController
  - storage: FileStorageController<T>
  + load(): void
  + info(): FileDBInfo
  + store(): boolean
  + clear(): boolean
  + data(): T
}
class FileDBControllerFactory<T> {
  + FileDBControllerFactory(Path, Class<T>): 
  - baseObjectType: Class<T>
  - filePath: String
  + createController(): FileDBController<T>
}
class FileDBDAO<K, V> {
  + FileDBDAO(FileDBController<ISetCollection<K, V>>): 
  - controller: FileDBController<ISetCollection<K, V>>
  + getCollectionInfo(): CollectionInfo
  + has(K): boolean
  + remove(K): boolean
  + update(K, V): void
  + read(K): V
  + add(V): K
  + nextPrimaryKey(): K
  + readAll(): List<V>
  - asStream(): Stream<V>
  + readAll(Comparator<V>): List<V>
  + save(): void
  + getMin(): V
  + getMax(): V
  + clear(): void
}
entity FileDBInfo << record >> {
  + FileDBInfo(String, ZonedDateTime): 
  - filePath: String
  - creationDate: ZonedDateTime
  + creationDate(): ZonedDateTime
  + filePath(): String
}
class FileDBWorkersDAO {
  + FileDBWorkersDAO(FileDBController<WorkerCollection>): 
  + add(Worker): Integer
  + nextPrimaryKey(): Integer
  + update(Integer, Worker): void
}
class FileIOController {
  + FileIOController(String, boolean): 
  + FileIOController(String): 
  + write(byte[]): void
  + openWriteStream(): FileOutputStream
  + clear(): void
  + openReadStream(): FileInputStream
  + read(): byte[]
}
class FileStorageController<T> {
  + FileStorageController(FileIOController, SerDesService<T>): 
  - file: FileIOController
  - serDesService: SerDesService<T>
  + storeObject(T): void
  + clear(): void
  + loadObject(): T
}
interface ICollectionCRUDDAO<K, V> << interface >> {
  + has(K): boolean
  + remove(K): boolean
  + add(V): K
  + getMin(): V
  + save(): void
  + read(K): V
  + nextPrimaryKey(): K
  + clear(): void
  + getCollectionInfo(): CollectionInfo
  + readAll(Comparator<V>): List<V>
  + getMax(): V
  + update(K, V): void
  + readAll(): List<V>
}
interface ICollectionDAO<K, V> << interface >> {
  + filter(Predicate<V>): List<V>
  + remove(Predicate<V>): void
  + getAllMapped(Function<V, T>): List<T>
}
interface IKeyedEntity<K> << interface >> {
  + getPrimaryKey(): K
}
interface ISetCollection<K, V> << interface >>
interface IWorkerCollectionDAO << interface >>
class Main {
  + Main(): 
  + main(String[]): void
}
class MainExecutor {
  + MainExecutor(Path): 
}
class ScriptExecutor {
  + ScriptExecutor(Executor): 
  - targetExecutor: Executor
  - processScript(ExecuteScriptCommand): ICommandResponse
}
class SerDesService<T> {
  + SerDesService(Class<T>): 
  - mapper: ObjectMapper
  - baseClass: Class<T>
  # getObjectMapper(): ObjectMapper
  + serialize(T): byte[]
  + deserialize(byte[]): T
}
class Worker {
  + Worker(Integer, ZonedDateTime, String, Coordinates, float, Date, Organization, LocalDate, Position): 
  + Worker(): 
  - creationDate: ZonedDateTime
  - salary: float
  - position: Position
  - organization: Organization
  - coordinates: Coordinates
  - nextId: Integer
  - name: String
  - startDate: Date
  - endDate: LocalDate
  - id: Integer
  + getName(): String
  + getId(): Integer
  + setCoordinates(Coordinates): void
  + setPosition(Position): void
  + setEndDate(LocalDate): void
  + getCreationDate(): ZonedDateTime
  + setName(String): void
  + toString(): String
  + getCoordinates(): Coordinates
  + withId(Integer): Worker
  + getSalary(): float
  + setStartDate(Date): void
  + withCreationDate(ZonedDateTime): Worker
  + getStartDate(): Date
  + setOrganization(Organization): void
  + getOrganization(): Organization
  + getEndDate(): LocalDate
  + getPosition(): Position
  + setSalary(float): void
  + equals(Object): boolean
  + compareTo(Worker): int
  + getPrimaryKey(): Integer
  + nicePrintFormat(List<Worker>): String
  + getComparator(): Comparator<Worker>
}
class WorkerCollection {
  + WorkerCollection(): 
  + add(Worker): boolean
  + addAll(Collection<Worker>): boolean
}
class WorkerCollectionDAOFactory {
  + WorkerCollectionDAOFactory(): 
  + createDAO(FileDBController<WorkerCollection>): ICollectionDAO<Integer, Worker>
}
class WorkersCRUDExecutor {
  + WorkersCRUDExecutor(IWorkerCollectionDAO): 
}
class WorkersSpecialExecutor {
  + WorkersSpecialExecutor(IWorkerCollectionDAO): 
  - dao: IWorkerCollectionDAO
  - addIfMin(AddIfMinCommand): void
  - filterLess(FilterLessPosCommand): FilterLessPosCommandResponse
  - printDescending(PrintDescendingCommand): PrintDescendingCommandResponse
  - removeIfGreater(RemoveGreaterCommand): void
  - uniqueOrgs(UniqueOrganisationCommand): UniqueOrganisationCommandResponse
  - addIfMax(AddIfMaxCommand): void
}
class XMLSerDesService<T> {
  + XMLSerDesService(Class<T>): 
  # getObjectMapper(): ObjectMapper
}

DBControllerFactory         ..>  DBController               
DBControllerFactory         ..>  DBCreateException          
Executor                    ..>  APICommand                 
FileDBController            ..^  DBController               
FileDBController            ..>  FileDBInfo                 
FileDBController           "1" *--> "fileIO\n1" FileIOController           
FileDBController           "1" *--> "storage\n1" FileStorageController      
FileDBController            ..>  XMLSerDesService           
FileDBControllerFactory     ..^  DBControllerFactory        
FileDBControllerFactory     ..>  DBCreateException          
FileDBControllerFactory     ..>  FileDBController           
FileDBControllerFactory     ..>  FileIOController           
FileDBDAO                   ..>  CollectionInfo             
FileDBDAO                  "1" *--> "controller\n1" FileDBController           
FileDBDAO                   ..>  FileDBInfo                 
FileDBDAO                   ..^  ICollectionDAO             
FileDBDAO                   ..>  IKeyedEntity               
FileDBDAO                   ..>  ISetCollection             
FileDBDAO                   ..>  Worker                     
FileDBDAO                   ..>  WorkerCollection           
FileDBWorkersDAO            ..>  FileDBController           
FileDBWorkersDAO            --^  FileDBDAO                  
FileDBWorkersDAO            ..>  ICollectionDAO             
FileDBWorkersDAO            ..^  IWorkerCollectionDAO       
FileDBWorkersDAO            ..>  Worker                     
FileDBWorkersDAO            ..>  WorkerCollection           
FileStorageController      "1" *--> "file\n1" FileIOController           
FileStorageController      "1" *--> "serDesService\n1" SerDesService              
ICollectionCRUDDAO          ..>  CollectionInfo             
ICollectionCRUDDAO          ..>  IKeyedEntity               
ICollectionDAO              --^  ICollectionCRUDDAO         
ICollectionDAO              ..>  IKeyedEntity               
ISetCollection              ..>  IKeyedEntity               
IWorkerCollectionDAO        --^  ICollectionDAO             
IWorkerCollectionDAO        ..>  Worker                     
Main                        ..>  Worker                     
MainExecutor                --^  Executor                   
MainExecutor                ..>  FileDBController           
MainExecutor                ..>  FileDBControllerFactory    
MainExecutor                ..>  IWorkerCollectionDAO       
MainExecutor                ..>  ScriptExecutor             
MainExecutor                ..>  WorkerCollection           
MainExecutor                ..>  WorkerCollectionDAOFactory 
MainExecutor                ..>  WorkersCRUDExecutor        
MainExecutor                ..>  WorkersSpecialExecutor     
ScriptExecutor              ..>  APICommand                 
ScriptExecutor              --^  Executor                   
ScriptExecutor             "1" *--> "targetExecutor\n1" Executor                   
Worker                      ..^  IKeyedEntity               
WorkerCollection            ..^  ISetCollection             
WorkerCollection            ..>  Worker                     
WorkerCollectionDAOFactory  ..>  FileDBController           
WorkerCollectionDAOFactory  ..>  FileDBWorkersDAO           
WorkerCollectionDAOFactory  ..>  ICollectionDAO             
WorkerCollectionDAOFactory  ..>  Worker                     
WorkerCollectionDAOFactory  ..>  WorkerCollection           
WorkersCRUDExecutor         --^  Executor                   
WorkersCRUDExecutor         ..>  ICollectionCRUDDAO         
WorkersCRUDExecutor         ..>  ICollectionDAO             
WorkersCRUDExecutor         ..>  IWorkerCollectionDAO       
WorkersCRUDExecutor         ..>  Worker                     
WorkersSpecialExecutor      --^  Executor                   
WorkersSpecialExecutor      ..>  ICollectionCRUDDAO         
WorkersSpecialExecutor      ..>  ICollectionDAO             
WorkersSpecialExecutor     "1" *--> "dao\n1" IWorkerCollectionDAO       
WorkersSpecialExecutor      ..>  Worker                     
XMLSerDesService            --^  SerDesService              
@enduml
