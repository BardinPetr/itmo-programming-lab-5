
@startuml

!theme plain
top to bottom direction
skinparam linetype ortho
skinparam classAttributeIconSize 0
hide circle

<style>
classDiagram {
    class {
        header {
            FontStyle bold
        }
    }
}
</style>
!theme plain
top to bottom direction
skinparam linetype ortho

abstract class APICommand <<abstract>> {
  + APICommand(): 
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + validate(): ValidationResponse
  {abstract} + getType(): String
  + getInteractArgs(): Field[]
  + getInlineArgs(): Field[]
  + createResponse(): ICommandResponse
}
class AddCommand {
  + AddCommand(): 
  + AddCommand(Worker): 
  + element: Worker
  + getType(): String
  + getElement(): Worker
  + setElement(Worker): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + getInteractArgs(): Field[]
  + createResponse(): AddCommandResponse
  + validate(): ValidationResponse
}
class AddCommandResponse {
  + AddCommandResponse(): 
  - id: Integer
  + getUserMessage(): String
  + getId(): Integer
  + setId(Integer): void
}
class AddIfMaxCommand {
  + AddIfMaxCommand(): 
  + getType(): String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
}
class AddIfMinCommand {
  + AddIfMinCommand(): 
  + getType(): String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
}
class ClearCommand {
  + ClearCommand(): 
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + getType(): String
}
class CollectionInfo {
  + CollectionInfo(String, String, ZonedDateTime, Integer): 
  - initializationDate: ZonedDateTime
  - name: String
  - itemsCount: Integer
  - type: String
  + getItemsCount(): Integer
  + getName(): String
  + getType(): String
  + getInitializationDate(): ZonedDateTime
  + setName(String): void
  + setType(String): void
  + setInitializationDate(ZonedDateTime): void
  + toString(): String
  + setItemsCount(Integer): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
}
class Coordinates {
  + Coordinates(Integer, float): 
  + Coordinates(): 
  - x: Integer
  - y: float
  + getX(): Integer
  + getY(): float
  + setX(Integer): void
  + setY(float): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + compareTo(Coordinates): int
}
class CoordinatesValidation {
  + CoordinatesValidation(): 
  + validateY(Float): ValidationResponse
  + validateX(Integer): ValidationResponse
  + validateAll(Coordinates): ValidationResponse
}
class ExecuteScriptCommand {
  + ExecuteScriptCommand(): 
  + ExecuteScriptCommand(List<APICommand>): 
  - commands: List<APICommand>
  + getCommands(): List<APICommand>
  + setCommands(List<APICommand>): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + createResponse(): ExecuteScriptCommandResponse
  + getType(): String
  + getInlineArgs(): Field[]
}
class ExecuteScriptCommandResponse {
  + ExecuteScriptCommandResponse(): 
  + getUserMessage(): String
}
class Field<T> {
  + Field(): 
  + Field(String, Class<T>): 
  - valueClass: Class<T>
  - name: String
  + getName(): String
  + getValueClass(): Class<T>
  + setName(String): void
  + setValueClass(Class<T>): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
}
class FieldWithDesc<T> {
  + FieldWithDesc(String, Class<T>, String, IValidator<T>, boolean): 
  + FieldWithDesc(String, Class<T>, String, boolean): 
  - promptMsg: String
  - nullAble: boolean
  - validator: IValidator<T>
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + getPromptMsg(): String
  + getValidator(): IValidator<T>
  + isNullAble(): boolean
  + toString(): String
}
class FilterLessPosCommand {
  + FilterLessPosCommand(): 
  + FilterLessPosCommand(Position): 
  + position: Position
  + getPosition(): Position
  + setPosition(Position): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + getInlineArgs(): Field[]
  + getType(): String
  + createResponse(): FilterLessPosCommandResponse
}
class FilterLessPosCommandResponse {
  + FilterLessPosCommandResponse(): 
  + getUserMessage(): String
}
class GetWorkerCommand {
  + GetWorkerCommand(): 
  + GetWorkerCommand(Integer): 
  + id: Integer
  + getId(): Integer
  + setId(Integer): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + getType(): String
  + createResponse(): GetWorkerCommandResponse
}
class GetWorkerCommandResponse {
  + GetWorkerCommandResponse(): 
  - worker: Worker
  + getWorker(): Worker
  + setWorker(Worker): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
}
class GetWorkerIdsCommand {
  + GetWorkerIdsCommand(): 
  + getType(): String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + createResponse(): GetWorkerIdsCommandResponse
}
class GetWorkerIdsCommandResponse {
  + GetWorkerIdsCommandResponse(): 
}
interface ICommandResponse << interface >> {
  + getUserMessage(): String
}
interface IKeyedEntity<K> << interface >> {
  + getPrimaryKey(): K
}
interface ISetCollection<K, V> << interface >>
interface IValidator<T> << interface >> {
  + validate(T): ValidationResponse
}
class InfoCommand {
  + InfoCommand(): 
  + getType(): String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + createResponse(): InfoCommandResponse
}
class InfoCommandResponse {
  + InfoCommandResponse(): 
  - result: CollectionInfo
  + getResult(): CollectionInfo
  + getUserMessage(): String
  + setResult(CollectionInfo): void
}
class ListCommandResponse<T> {
  + ListCommandResponse(): 
  - result: List<T>
  + getResult(): List<T>
  + setResult(List<T>): void
  + getUserMessage(): String
}
class Organization {
  + Organization(String, OrganizationType): 
  + Organization(): 
  ~ type: OrganizationType
  ~ fullName: String
  + getFullName(): String
  + getType(): OrganizationType
  + setFullName(String): void
  + setType(OrganizationType): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + compareTo(Organization): int
}
enum OrganizationType << enumeration >> {
  - OrganizationType(int): 
  + PUBLIC: 
  + OPEN_JOINT_STOCK_COMPANY: 
  + PRIVATE_LIMITED_COMPANY: 
  + COMMERCIAL: 
  - value: int
  + getValue(): int
  + values(): OrganizationType[]
  + valueOf(String): OrganizationType
}
class OrganizationValidation {
  + OrganizationValidation(): 
  + validateAll(Organization): ValidationResponse
  + validateFullName(String): ValidationResponse
}
enum Position << enumeration >> {
  - Position(int): 
  + CLEANER: 
  + value: int
  + ENGINEER: 
  + HEAD_OF_DEPARTMENT: 
  + MANAGER_OF_CLEANING: 
  + LEAD_DEVELOPER: 
  + getValue(): int
  + values(): Position[]
  + valueOf(String): Position
}
class PrintDescendingCommand {
  + PrintDescendingCommand(): 
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + createResponse(): PrintDescendingCommandResponse
  + getType(): String
}
class PrintDescendingCommandResponse {
  + PrintDescendingCommandResponse(): 
  + getUserMessage(): String
}
class RemoveByIdCommand {
  + RemoveByIdCommand(): 
  + RemoveByIdCommand(Integer): 
  + id: Integer
  + getId(): Integer
  + setId(Integer): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + getType(): String
  + getInlineArgs(): Field[]
}
class RemoveGreaterCommand {
  + RemoveGreaterCommand(): 
  + RemoveGreaterCommand(Worker): 
  + element: Worker
  + getElement(): Worker
  + setElement(Worker): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + getInteractArgs(): Field[]
  + validate(): ValidationResponse
  + getType(): String
}
class Response<T> {
  + Response(boolean, boolean, String, T): 
  + Response(): 
  - text: String
  - success: boolean
  - payload: T
  - resolved: boolean
  + isSuccess(): boolean
  + hashCode(): int
  + toString(): String
  + isResolved(): boolean
  + getText(): String
  # canEqual(Object): boolean
  + getPayload(): T
  + setSuccess(boolean): void
  + setResolved(boolean): void
  + equals(Object): boolean
  + setText(String): void
  + setPayload(T): void
  + error(String): Response<T>
  + error(Exception): Response<T>
  + noResolve(): Response<T>
  + success(T): Response<T>
}
class SaveCommand {
  + SaveCommand(): 
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + getType(): String
}
class ShowCommand {
  + ShowCommand(): 
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + getType(): String
  + createResponse(): ShowCommandResponse
}
class ShowCommandResponse {
  + ShowCommandResponse(): 
  + getUserMessage(): String
}
class TreeSet<E> {
  + TreeSet(Collection<E>): 
  + TreeSet(SortedSet<E>): 
  + TreeSet(Comparator<E>): 
  + TreeSet(): 
  ~ TreeSet(NavigableMap<E, Object>): 
  - PRESENT: Object
  - serialVersionUID: long
  - m: NavigableMap<E, Object>
  + subSet(E, E): SortedSet<E>
  + pollLast(): E?
  + subSet(E, boolean, E, boolean): NavigableSet<E>
  + addAll(Collection<E>): boolean
  + lower(E): E?
  - readObject(ObjectInputStream): void
  + ceiling(E): E?
  + headSet(E, boolean): NavigableSet<E>
  + size(): int
  + iterator(): Iterator<E>
  + descendingSet(): NavigableSet<E>
  + tailSet(E, boolean): NavigableSet<E>
  + headSet(E): SortedSet<E>
  + contains(Object): boolean
  + higher(E): E?
  + remove(Object): boolean
  + isEmpty(): boolean
  - writeObject(ObjectOutputStream): void
  + descendingIterator(): Iterator<E>
  + tailSet(E): SortedSet<E>
  + add(E): boolean
  + spliterator(): Spliterator<E>
  + first(): E
  + comparator(): Comparator<E>?
  + pollFirst(): E?
  + floor(E): E?
  + clear(): void
  + last(): E
  + clone(): Object
}
class UniqueOrganisationCommand {
  + UniqueOrganisationCommand(): 
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + createResponse(): UniqueOrganisationCommandResponse
  + getType(): String
}
class UniqueOrganisationCommandResponse {
  + UniqueOrganisationCommandResponse(): 
  - organizations: Set<Organization>
  + getUserMessage(): String
  + getOrganizations(): Set<Organization>
  + setOrganizations(Set<Organization>): void
}
class UpdateCommand {
  + UpdateCommand(): 
  + UpdateCommand(Integer, Worker): 
  + id: Integer
  + element: Worker
  + getId(): Integer
  + getElement(): Worker
  + setId(Integer): void
  + setElement(Worker): void
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + validate(): ValidationResponse
  + getInlineArgs(): Field[]
  + getInteractArgs(): Field[]
  + getType(): String
}
class ValidationResponse {
  + ValidationResponse(boolean, String): 
  - allowed: boolean
  - msg: String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + isAllowed(): boolean
  + getMsg(): String
  + setAllowed(boolean): void
  + setMsg(String): void
  + toString(): String
}
class Worker {
  + Worker(Integer, ZonedDateTime, String, Coordinates, float, Date, Organization, LocalDate, Position): 
  + Worker(): 
  - creationDate: ZonedDateTime
  - salary: float
  - position: Position
  - organization: Organization
  - coordinates: Coordinates
  - nextId: Integer
  - name: String
  - startDate: Date
  - endDate: LocalDate
  - id: Integer
  + getCoordinates(): Coordinates
  + setSalary(float): void
  + getId(): Integer
  + withId(Integer): Worker
  + getCreationDate(): ZonedDateTime
  + getName(): String
  + getSalary(): float
  + setEndDate(LocalDate): void
  + getStartDate(): Date
  + setName(String): void
  + setOrganization(Organization): void
  + setPosition(Position): void
  + toString(): String
  + getOrganization(): Organization
  + getEndDate(): LocalDate
  + setCoordinates(Coordinates): void
  + setStartDate(Date): void
  + getPosition(): Position
  + withCreationDate(ZonedDateTime): Worker
  + equals(Object): boolean
  + compareTo(Worker): int
  + getPrimaryKey(): Integer
  + nicePrintFormat(List<Worker>): String
  + getComparator(): Comparator<Worker>
}
class WorkerCollection {
  + WorkerCollection(): 
  + add(Worker): boolean
  + addAll(Collection<Worker>): boolean
}
class WorkerValidation {
  + WorkerValidation(): 
  + validateId(Integer): ValidationResponse
  + validateCoordinate(Coordinates): ValidationResponse
  + validateAll(Worker): ValidationResponse
  + validateName(String): ValidationResponse
  + validateSalary(Float): ValidationResponse
  + validateStartDate(Date): ValidationResponse
}

APICommand                         ..>  Field                             
APICommand                         ..>  ICommandResponse                  
APICommand                         ..>  ValidationResponse                
AddCommand                         --^  APICommand                        
AddCommand                         ..>  AddCommandResponse                
AddCommand                         ..>  Field                             
AddCommand                         ..>  ValidationResponse                
AddCommand                        "1" *--> "element\n1" Worker                            
AddCommand                         ..>  WorkerValidation                  
AddCommandResponse                 +--  AddCommand                        
AddCommandResponse                 ..^  ICommandResponse                  
AddIfMaxCommand                    --^  AddCommand                        
AddIfMinCommand                    --^  AddCommand                        
ClearCommand                       --^  APICommand                        
CoordinatesValidation              ..>  Coordinates                       
CoordinatesValidation              ..>  ValidationResponse                
ExecuteScriptCommand               --^  APICommand                        
ExecuteScriptCommand              "1" *--> "commands\n*" APICommand                        
ExecuteScriptCommand               ..>  ExecuteScriptCommandResponse      
ExecuteScriptCommand               ..>  Field                             
ExecuteScriptCommandResponse       +--  ExecuteScriptCommand              
ExecuteScriptCommandResponse       ..>  ICommandResponse                  
ExecuteScriptCommandResponse       --^  ListCommandResponse               
ExecuteScriptCommandResponse       ..>  Response                          
FieldWithDesc                      --^  Field                             
FieldWithDesc                     "1" *--> "validator\n1" IValidator                        
FieldWithDesc                      ..>  ValidationResponse                
FilterLessPosCommand               --^  APICommand                        
FilterLessPosCommand               ..>  Field                             
FilterLessPosCommand               ..>  FilterLessPosCommandResponse      
FilterLessPosCommand              "1" *--> "position\n1" Position                          
FilterLessPosCommandResponse       +--  FilterLessPosCommand              
FilterLessPosCommandResponse       --^  ListCommandResponse               
FilterLessPosCommandResponse       ..>  Worker                            
GetWorkerCommand                   --^  APICommand                        
GetWorkerCommand                   ..>  GetWorkerCommandResponse          
GetWorkerCommandResponse           +--  GetWorkerCommand                  
GetWorkerCommandResponse           ..^  ICommandResponse                  
GetWorkerCommandResponse          "1" *--> "worker\n1" Worker                            
GetWorkerIdsCommand                --^  APICommand                        
GetWorkerIdsCommand                ..>  GetWorkerIdsCommandResponse       
GetWorkerIdsCommandResponse        +--  GetWorkerIdsCommand               
GetWorkerIdsCommandResponse        --^  ListCommandResponse               
ISetCollection                     ..>  IKeyedEntity                      
IValidator                         ..>  ValidationResponse                
InfoCommand                        --^  APICommand                        
InfoCommand                        ..>  InfoCommandResponse               
InfoCommandResponse               "1" *--> "result\n1" CollectionInfo                    
InfoCommandResponse                ..^  ICommandResponse                  
InfoCommandResponse                +--  InfoCommand                       
ListCommandResponse                ..^  ICommandResponse                  
Organization                      "1" *--> "type\n1" OrganizationType                  
OrganizationValidation             ..>  Organization                      
OrganizationValidation             ..>  ValidationResponse                
PrintDescendingCommand             --^  APICommand                        
PrintDescendingCommand             ..>  PrintDescendingCommandResponse    
PrintDescendingCommandResponse     --^  ListCommandResponse               
PrintDescendingCommandResponse     +--  PrintDescendingCommand            
PrintDescendingCommandResponse     ..>  Worker                            
RemoveByIdCommand                  --^  APICommand                        
RemoveByIdCommand                  ..>  Field                             
RemoveGreaterCommand               --^  APICommand                        
RemoveGreaterCommand               ..>  Field                             
RemoveGreaterCommand               ..>  ValidationResponse                
RemoveGreaterCommand              "1" *--> "element\n1" Worker                            
RemoveGreaterCommand               ..>  WorkerValidation                  
Response                           ..>  ICommandResponse                  
SaveCommand                        --^  APICommand                        
ShowCommand                        --^  APICommand                        
ShowCommand                        ..>  ShowCommandResponse               
ShowCommandResponse                --^  ListCommandResponse               
ShowCommandResponse                +--  ShowCommand                       
ShowCommandResponse                ..>  Worker                            
UniqueOrganisationCommand          --^  APICommand                        
UniqueOrganisationCommand          ..>  UniqueOrganisationCommandResponse 
UniqueOrganisationCommandResponse  ..^  ICommandResponse                  
UniqueOrganisationCommandResponse "1" *--> "organizations\n*" Organization                      
UniqueOrganisationCommandResponse  +--  UniqueOrganisationCommand         
UpdateCommand                      --^  APICommand                        
UpdateCommand                      ..>  Field                             
UpdateCommand                      ..>  ValidationResponse                
UpdateCommand                     "1" *--> "element\n1" Worker                            
UpdateCommand                      ..>  WorkerValidation                  
Worker                            "1" *--> "coordinates\n1" Coordinates                       
Worker                             ..^  IKeyedEntity                      
Worker                            "1" *--> "organization\n1" Organization                      
Worker                            "1" *--> "position\n1" Position                          
WorkerCollection                   ..^  ISetCollection                    
WorkerCollection                   --^  TreeSet                           
WorkerCollection                   ..>  Worker                            
WorkerValidation                   ..>  Coordinates                       
WorkerValidation                   ..>  CoordinatesValidation             
WorkerValidation                   ..>  ValidationResponse                
WorkerValidation                   ..>  Worker                            
@enduml
