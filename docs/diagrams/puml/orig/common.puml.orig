@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class APIClientException {
  + APIClientException(Throwable): 
  + APIClientException(String): 
}
class AbstractConsoleArgumentsParser {
  + AbstractConsoleArgumentsParser(String[]): 
  - formatter: HelpFormatter
  - log: Logger
  - parsedOptions: CommandLine
  - parser: CommandLineParser
  - parse(Options, String[]): CommandLine
  + getOptions(): CommandLine
  # createOptions(): Options
}
class Executor {
  + Executor(): 
  - log: Logger
  + MAX_RECURSION_DEPTH: int
  - operationMap: Map<Class<APICommand>, Operation<APICommand, APICommandResponse>>
  - childExecutors: List<Executor>
  + executeBatch(List<APICommand>): List<APICommandResponse>
  + registerVoidOperation(Class<T>, NoReturnOperation<T>): void
  + execute(APICommand): APICommandResponse
  + registerExecutor(Executor): void
  # execute(APICommand, int): APICommandResponse
  + registerOperation(Class<T>, Operation<T, APICommandResponse>): void
}
class ExecutorTest {
  + ExecutorTest(): 
  ~ executorVoidTest(): void
  ~ executorRegistrationTest(): void
  ~ executorErrorTest(): void
  ~ executorRecursionTest(): void
  ~ executorDelegationTest(): void
}
class FileAccessException {
  + FileAccessException(File, OperationType): 
  + FileAccessException(Exception, String, OperationType): 
  + FileAccessException(Exception, File, OperationType): 
  + FileAccessException(String, OperationType): 
  - type: OperationType
  - path: String
  + getType(): OperationType
  + getPath(): String
}
class FileController {
  + FileController(String): 
  + FileController(String, boolean): 
  # file: File
  # ensureExistence(boolean): boolean
  - loadPath(String): File
  + check(): boolean
  # checkWriteAccess(): void
  # checkReadAccess(): void
  - checkAccess(): void
  + creationDate(): ZonedDateTime
  + getPath(): String
  - checkExistence(): boolean
}
class FileIOController {
  + FileIOController(String): 
  + FileIOController(String, boolean): 
  + openReadStream(): FileInputStream
  + write(byte[]): void
  + read(): byte[]
  + openWriteStream(): FileOutputStream
  + clear(): void
}
class FileUtils {
  + FileUtils(): 
  + getParentDir(File): File
  + createFile(Path, String): File
  + checkParentDirectoryPermissions(File): boolean
  + delete(File): void
  + read(File): String
  + exists(File): boolean
  + createDir(String): Path
  + write(File, String): void
  + deleteDir(Path): void
  + parsePermissions(String): FileAttribute<Set<PosixFilePermission>>
}
class InvalidDataFileException {
  + InvalidDataFileException(String, byte[], SerDesException): 
  - path: String
  - contents: byte[]
  + getMessage(): String
  + getContents(): byte[]
  + getPath(): String
}
class JSONSerDesService<T> {
  + JSONSerDesService(Class<T>): 
  # getObjectMapper(): ObjectMapper
  # getPolymorphicValidator(): BasicPolymorphicTypeValidator
}
interface NoReturnOperation<T> << interface >> {
  + apply(T): void
}
class ObjectMapperFactory {
  + ObjectMapperFactory(): 
  + createMapper(): ObjectMapper
}
interface Operation<T, V> << interface >> {
  + apply(T): V
}
enum OperationType << enumeration >> {
  - OperationType(): 
  - OperationType(String): 
  + PERM_WRITE: 
  + SET_PERMISSION: 
  + WRITE: 
  + READ: 
  + PERM_READ: 
  + CREATE: 
  + OPEN: 
  - description: String
  + getDescription(): String
  + valueOf(String): OperationType
  + values(): OperationType[]
}
class SerDesException {
  + SerDesException(Type, Exception): 
  - direction: Type
  - internalException: Exception
  + getInternalException(): Exception
  + getDirection(): Type
  + toString(): String
}
class SerDesService<T> {
  + SerDesService(Class<T>): 
  - mapper: ObjectMapper
  - baseClass: Class<T>
  + deserialize(byte[]): T
  # getObjectMapper(): ObjectMapper
  + serialize(T): byte[]
}
class TestCmd {
  + TestCmd(String): 
  + value: String
  + getType(): String
  + createResponse(): TestCmdResponse
}
class TestCmd2 {
  ~ TestCmd2(): 
  + getType(): String
}
class TestCmdResponse {
  + TestCmdResponse(): 
  + value: String
}
enum Type << enumeration >> {
  - Type(): 
  + SERIALIZE: 
  + DESERIALIZE: 
  + valueOf(String): Type
  + values(): Type[]
}
class ValueDeserializer {
  + ValueDeserializer(): 
  - mapper: ObjectMapper
  + deserialize(Class<K>, String): K
}
class XMLSerDesService<T> {
  + XMLSerDesService(Class<T>): 
  # getObjectMapper(): ObjectMapper
}

Executor                       "1" *-[#595959,plain]-> "operationMap\n*" Operation                      
FileAccessException            "1" *-[#595959,plain]-> "type\n1" OperationType                  
FileIOController                -[#000082,plain]-^  FileController                 
JSONSerDesService               -[#000082,plain]-^  SerDesService                  
OperationType                   +-[#820000,plain]-  FileAccessException            
SerDesException                "1" *-[#595959,plain]-> "direction\n1" Type                           
TestCmd                         +-[#820000,plain]-  ExecutorTest                   
TestCmd2                        +-[#820000,plain]-  ExecutorTest                   
TestCmdResponse                 +-[#820000,plain]-  TestCmd                        
Type                            +-[#820000,plain]-  SerDesException                
XMLSerDesService                -[#000082,plain]-^  SerDesService                  
@enduml
