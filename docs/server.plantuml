@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class CollectionInfo {
  + CollectionInfo(String, String, LocalDateTime, Integer): 
  - itemsCount: Integer
  - name: String
  - type: String
  - initializationDate: LocalDateTime
  + toString(): String
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
   name: String
   itemsCount: Integer
   type: String
   initializationDate: LocalDateTime
}
class Command {
  + Command(): 
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + createResponse(): ICommandResponse
  + validate(): ValidationResponse
   inlineArgs: Field[]
   type: String
   interactArgs: Field[]
}
class Coordinates {
  + Coordinates(Integer, float): 
  + Coordinates(): 
  - y: float
  - x: Integer
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
  + compareTo(Coordinates): int
   x: Integer
   y: float
}
class Executor {
  + Executor(): 
  + execute(Command): Response<ICommandResponse>
  + registerVoidOperation(Class<T>, NoReturnOperation<T>): void
  + registerOperation(Class<T>, Operation<T, ICommandResponse>): void
  # execute(Command, int): Response<ICommandResponse>
  + registerExecutor(Executor): void
  + executeBatch(List<Command>): List<Response<ICommandResponse>>
}
class FileAccessException {
  + FileAccessException(Exception, String, OperationType): 
  + FileAccessException(File, OperationType): 
  + FileAccessException(Exception, File, OperationType): 
  + FileAccessException(String, OperationType): 
  - path: String
  - type: OperationType
   type: OperationType
   path: String
}
class FileDBController<T> {
  + FileDBController(FileIOController, Class<T>): 
  + store(): boolean
  + clear(): boolean
  + load(): boolean
  + data(): T
}
class FileDBDAO<K, V> {
  + FileDBDAO(FileDBController<ISetCollection<K, V>>): 
  + read(K): V
  + add(V): K
  - asStream(): Stream<V>
  + clear(): void
  + readAll(): List<V>
  + remove(K): boolean
  + readAll(Comparator<V>): List<V>
  + update(K, V): void
  + save(): void
  + nextPrimaryKey(): K
   max: V
   min: V
   collectionInfo: CollectionInfo
}
entity FileDBInfo << record >> {
  + FileDBInfo(String, LocalDateTime): 
  + creationDate(): LocalDateTime
  + filePath(): String
}
class FileDBWorkersDAO {
  + FileDBWorkersDAO(FileDBController<WorkerCollection>): 
  + nextPrimaryKey(): Integer
  + add(Worker): Integer
   collectionInfo: CollectionInfo
}
class FileIOController {
  + FileIOController(String): 
  + write(byte[]): void
  + clear(): void
  + openWriteStream(): FileOutputStream
  + read(): byte[]
  + openReadStream(): FileInputStream
}
class FileStorageController<T> {
  + FileStorageController(FileIOController, SerDesService<T>): 
  + loadObject(): T
  + clear(): void
  + storeObject(T): void
}
interface ICollectionBaseDAO<K, V> << interface >> {
  + readAll(): List<V>
  + add(V): K
  + readAll(Comparator<V>): List<V>
  + remove(K): boolean
  + clear(): void
  + save(): void
  + update(K, V): void
  + read(K): V
  + nextPrimaryKey(): K
   max: V
   min: V
   collectionInfo: CollectionInfo
}
interface ICollectionFilteredDAO<K, V> << interface >> {
  + remove(Predicate<V>): void
  + filter(Predicate<V>): List<V>
  + getMapped(Function<V, T>): List<T>
}
interface ICommandResponse << interface >> {
   userMessage: String
}
interface IKeyedEntity<K> << interface >> {
   primaryKey: K
}
interface ISetCollection<K, V> << interface >>
interface IWorkerCollectionDAO << interface >> {
  + filterLessThanPosition(Position): List<Worker>
  + addIfMax(Worker): void
  + addIfMin(Worker): void
  + removeIfGreater(Worker): void
   uniqueOrganizations: Set<Organization>
}
class InvalidDataFileException {
  + InvalidDataFileException(String, byte[], SerDesException): 
  - path: String
  - contents: byte[]
   path: String
   contents: byte[]
}
class MainExecutor {
  + MainExecutor(FileIOController): 
  - processScript(ServerExecuteScriptCommand): ICommandResponse
}
enum OperationType << enumeration >> {
  - OperationType(String): 
  - OperationType(): 
  - description: String
  + values(): OperationType[]
  + valueOf(String): OperationType
   description: String
}
class Organization {
  + Organization(String, OrganizationType): 
  + Organization(): 
  ~ fullName: String
  ~ type: OrganizationType
  + compareTo(Organization): int
  + equals(Object): boolean
  # canEqual(Object): boolean
  + hashCode(): int
  + toString(): String
   fullName: String
   type: OrganizationType
}
enum OrganizationType << enumeration >> {
  - OrganizationType(int): 
  - value: int
  + values(): OrganizationType[]
  + valueOf(String): OrganizationType
   value: int
}
enum Position << enumeration >> {
  - Position(int): 
  + valueOf(String): Position
  + values(): Position[]
}
class Response<T> {
  + Response(): 
  + Response(boolean, boolean, String, T): 
  - text: String
  - success: boolean
  - resolved: boolean
  - payload: T
  + toString(): String
  + hashCode(): int
  # canEqual(Object): boolean
  + equals(Object): boolean
  + noResolve(): Response<T>
  + error(String): Response<T>
  + success(T): Response<T>
  + error(Exception): Response<T>
   text: String
   success: boolean
   resolved: boolean
   payload: T
}
class SerDesException {
  + SerDesException(Type, Exception): 
  - direction: Type
  - internalException: Exception
  + toString(): String
   internalException: Exception
   direction: Type
}
class SerDesService<T> {
  + SerDesService(Class<T>): 
  + serialize(T): byte[]
  + deserialize(byte[]): T
   objectMapper: ObjectMapper
}
enum Type << enumeration >> {
  + Type(): 
  + values(): Type[]
  + valueOf(String): Type
}
class Worker {
  + Worker(Integer, ZonedDateTime, String, Coordinates, float, Date, Organization, LocalDate, Position): 
  + Worker(): 
  - id: Integer
  - salary: float
  - endDate: LocalDate
  - coordinates: Coordinates
  - organization: Organization
  - position: Position
  - startDate: Date
  - name: String
  - creationDate: ZonedDateTime
  + withId(Integer): Worker
  + withCreationDate(ZonedDateTime): Worker
  + toString(): String
  + nicePrintFormat(List<Worker>): String
  + compareTo(Worker): int
  + equals(Object): boolean
   name: String
   coordinates: Coordinates
   primaryKey: Integer
   organization: Organization
   creationDate: ZonedDateTime
   endDate: LocalDate
   startDate: Date
   comparator: Comparator<Worker>
   id: Integer
   position: Position
   salary: float
}
class WorkerCollection {
  + WorkerCollection(): 
}
class WorkersDAOExecutor {
  + WorkersDAOExecutor(IWorkerCollectionDAO): 
  - registerCRUD(): void
  - registerComplex(): void
}
class XMLSerDesService<T> {
  + XMLSerDesService(Class<T>): 
   objectMapper: ObjectMapper
}

Command                   -[#595959,dashed]->  ICommandResponse         
Coordinates               -[#595959,dashed]->  Coordinates              
Executor                  -[#595959,dashed]->  Command                  
Executor                 "1" *-[#595959,plain]-> "childExecutors\n*" Executor                 
Executor                  -[#595959,dashed]->  ICommandResponse         
Executor                  -[#595959,dashed]->  Response                 
FileAccessException       -[#595959,dashed]->  FileAccessException      
FileAccessException      "1" *-[#595959,plain]-> "type\n1" OperationType            
FileDBController          -[#595959,dashed]->  FileAccessException      
FileDBController          -[#595959,dashed]->  FileDBController         
FileDBController          -[#595959,dashed]->  FileIOController         
FileDBController         "1" *-[#595959,plain]-> "storage\n1" FileStorageController    
FileDBController          -[#595959,dashed]->  FileStorageController    : "«create»"
FileDBController          -[#595959,dashed]->  InvalidDataFileException 
FileDBController          -[#595959,dashed]->  SerDesException          
FileDBController          -[#595959,dashed]->  XMLSerDesService         : "«create»"
FileDBDAO                 -[#595959,dashed]->  CollectionInfo           : "«create»"
FileDBDAO                "1" *-[#595959,plain]-> "controller\n1" FileDBController         
FileDBDAO                 -[#595959,dashed]->  FileDBDAO                
FileDBDAO                 -[#008200,dashed]-^  ICollectionFilteredDAO   
FileDBDAO                 -[#595959,dashed]->  IKeyedEntity             
FileDBDAO                 -[#595959,dashed]->  ISetCollection           
FileDBDAO                 -[#595959,dashed]->  Worker                   
FileDBWorkersDAO          -[#595959,dashed]->  CollectionInfo           
FileDBWorkersDAO          -[#595959,dashed]->  FileDBController         
FileDBWorkersDAO          -[#000082,plain]-^  FileDBDAO                
FileDBWorkersDAO          -[#595959,dashed]->  FileDBWorkersDAO         
FileDBWorkersDAO          -[#595959,dashed]->  ICollectionFilteredDAO   
FileDBWorkersDAO          -[#008200,dashed]-^  IWorkerCollectionDAO     
FileDBWorkersDAO          -[#595959,dashed]->  Worker                   
FileDBWorkersDAO          -[#595959,dashed]->  WorkerCollection         
FileIOController          -[#595959,dashed]->  FileAccessException      : "«create»"
FileIOController          -[#595959,dashed]->  FileIOController         
FileStorageController     -[#595959,dashed]->  FileAccessException      
FileStorageController    "1" *-[#595959,plain]-> "file\n1" FileIOController         
FileStorageController     -[#595959,dashed]->  InvalidDataFileException : "«create»"
FileStorageController     -[#595959,dashed]->  SerDesException          
FileStorageController    "1" *-[#595959,plain]-> "serDesService\n1" SerDesService            
ICollectionBaseDAO        -[#595959,dashed]->  CollectionInfo           
ICollectionBaseDAO        -[#595959,dashed]->  ICollectionBaseDAO       
ICollectionBaseDAO        -[#595959,dashed]->  IKeyedEntity             
ICollectionFilteredDAO    -[#008200,plain]-^  ICollectionBaseDAO       
ICollectionFilteredDAO    -[#595959,dashed]->  ICollectionFilteredDAO   
ICollectionFilteredDAO    -[#595959,dashed]->  IKeyedEntity             
ISetCollection            -[#595959,dashed]->  IKeyedEntity             
IWorkerCollectionDAO      -[#595959,dashed]->  ICollectionBaseDAO       
IWorkerCollectionDAO      -[#008200,plain]-^  ICollectionFilteredDAO   
IWorkerCollectionDAO      -[#595959,dashed]->  Organization             
IWorkerCollectionDAO      -[#595959,dashed]->  Position                 
IWorkerCollectionDAO      -[#595959,dashed]->  Worker                   
InvalidDataFileException  -[#595959,dashed]->  SerDesException          
MainExecutor              -[#595959,dashed]->  Command                  
MainExecutor              -[#000082,plain]-^  Executor                 
MainExecutor              -[#595959,dashed]->  FileDBController         : "«create»"
MainExecutor              -[#595959,dashed]->  FileDBWorkersDAO         : "«create»"
MainExecutor              -[#595959,dashed]->  FileIOController         
MainExecutor              -[#595959,dashed]->  ICommandResponse         
MainExecutor              -[#595959,dashed]->  WorkerCollection         
MainExecutor              -[#595959,dashed]->  WorkersDAOExecutor       : "«create»"
OperationType             +-[#820000,plain]-  FileAccessException      
Organization              -[#595959,dashed]->  Organization             
Organization             "1" *-[#595959,plain]-> "type\n1" OrganizationType         
Response                  -[#595959,dashed]->  ICommandResponse         
Response                  -[#595959,dashed]->  Response                 : "«create»"
SerDesException          "1" *-[#595959,plain]-> "direction\n1" Type                     
SerDesService             -[#595959,dashed]->  SerDesException          : "«create»"
SerDesService             -[#595959,dashed]->  SerDesService            
Type                      +-[#820000,plain]-  SerDesException          
Worker                   "1" *-[#595959,plain]-> "coordinates\n1" Coordinates              
Worker                    -[#008200,dashed]-^  IKeyedEntity             
Worker                   "1" *-[#595959,plain]-> "organization\n1" Organization             
Worker                   "1" *-[#595959,plain]-> "position\n1" Position                 
Worker                    -[#595959,dashed]->  Worker                   
WorkerCollection          -[#008200,dashed]-^  ISetCollection           
WorkerCollection          -[#595959,dashed]->  Worker                   
WorkersDAOExecutor        -[#000082,plain]-^  Executor                 
WorkersDAOExecutor        -[#595959,dashed]->  ICollectionBaseDAO       
WorkersDAOExecutor       "1" *-[#595959,plain]-> "dao\n1" IWorkerCollectionDAO     
WorkersDAOExecutor        -[#595959,dashed]->  WorkersDAOExecutor       
XMLSerDesService          -[#000082,plain]-^  SerDesService            
@enduml
